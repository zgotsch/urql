{"version":3,"file":"urql-next.min.mjs","sources":["../src/DataHydrationContext.ts","../src/Provider.ts","../src/useUrqlValue.ts","../src/useQuery.ts"],"sourcesContent":["import React from 'react';\nimport { ServerInsertedHTMLContext } from 'next/navigation';\nimport type { UrqlResult } from './useUrqlValue';\n\ninterface DataHydrationValue {\n  isInjecting: boolean;\n  operationValuesByKey: Record<number, UrqlResult>;\n  RehydrateScript: () =>\n    | React.DetailedReactHTMLElement<\n        { dangerouslySetInnerHTML: { __html: string } },\n        HTMLElement\n      >\n    | React.FunctionComponentElement<any>;\n}\n\nconst DataHydrationContext = React.createContext<\n  DataHydrationValue | undefined\n>(undefined);\n\nfunction transportDataToJS(data: any) {\n  const key = 'urql_transport';\n  return `(window[Symbol.for(\"${key}\")] ??= []).push(${Buffer.from(\n    JSON.stringify(data)\n  ).toString('base64')})`;\n}\n\nexport const DataHydrationContextProvider = ({\n  children,\n}: React.PropsWithChildren<{}>) => {\n  const dataHydrationContext = React.useRef<DataHydrationValue>();\n  if (typeof window == 'undefined') {\n    if (!dataHydrationContext.current)\n      dataHydrationContext.current = buildContext();\n  }\n\n  return React.createElement(\n    DataHydrationContext.Provider,\n    { value: dataHydrationContext.current },\n    children\n  );\n};\n\nexport function useDataHydrationContext(): DataHydrationValue | undefined {\n  const dataHydrationContext = React.useContext(DataHydrationContext);\n  const insertHtml = React.useContext(ServerInsertedHTMLContext);\n\n  if (typeof window !== 'undefined') return;\n\n  if (insertHtml && dataHydrationContext && !dataHydrationContext.isInjecting) {\n    dataHydrationContext.isInjecting = true;\n    insertHtml(() =>\n      React.createElement(dataHydrationContext.RehydrateScript, {})\n    );\n  }\n  return dataHydrationContext;\n}\n\nlet key = 0;\nfunction buildContext(): DataHydrationValue {\n  const dataHydrationContext: DataHydrationValue = {\n    isInjecting: false,\n    operationValuesByKey: {},\n    RehydrateScript() {\n      dataHydrationContext.isInjecting = false;\n      if (!Object.keys(dataHydrationContext.operationValuesByKey).length)\n        return React.createElement(React.Fragment);\n\n      const __html = transportDataToJS({\n        rehydrate: { ...dataHydrationContext.operationValuesByKey },\n      });\n\n      dataHydrationContext.operationValuesByKey = {};\n\n      return React.createElement('script', {\n        key: key++,\n        dangerouslySetInnerHTML: { __html },\n      });\n    },\n  };\n\n  return dataHydrationContext;\n}\n","'use client';\n\nimport React from 'react';\nimport type { SSRExchange, Client } from 'urql';\nimport { Provider } from 'urql';\nimport { DataHydrationContextProvider } from './DataHydrationContext';\n\nexport const SSRContext = React.createContext<SSRExchange | undefined>(\n  undefined\n);\n\n/** Provider for `@urql/next` during non-rsc interactions.\n *\n * @remarks\n * `Provider` accepts a {@link Client} and provides it to all GraphQL hooks, it\n * also accepts an {@link SSRExchange} to distribute data when re-hydrating\n * on the client.\n *\n * @example\n * ```tsx\n * import {\n *  UrqlProvider,\n *  ssrExchange,\n *  cacheExchange,\n *  fetchExchange,\n *  createClient,\n * } from '@urql/next';\n *\n * const ssr = ssrExchange();\n * const client = createClient({\n *   url: 'https://trygql.formidable.dev/graphql/basic-pokedex',\n *   exchanges: [cacheExchange, ssr, fetchExchange],\n *   suspense: true,\n * });\n *\n * export default function Layout({ children }: React.PropsWithChildren) {\n *   return (\n *     <UrqlProvider client={client} ssr={ssr}>\n *      {children}\n *     </UrqlProvider>\n *   );\n * }\n *\n * ```\n */\nexport function UrqlProvider({\n  children,\n  ssr,\n  client,\n}: React.PropsWithChildren<{ ssr: SSRExchange; client: Client }>) {\n  return React.createElement(\n    Provider,\n    { value: client },\n    React.createElement(\n      SSRContext.Provider,\n      { value: ssr },\n      React.createElement(DataHydrationContextProvider, {}, children)\n    )\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport { useDataHydrationContext } from './DataHydrationContext';\nimport { SSRContext } from './Provider';\n\nexport const symbolString = 'urql_transport';\nexport const urqlTransportSymbol = Symbol.for(symbolString);\n\nexport type UrqlResult = { data?: any; error?: any; extensions?: any };\n\nexport function useUrqlValue(operationKey: number): void {\n  const ssrExchange = React.useContext(SSRContext);\n  const rehydrationContext = useDataHydrationContext();\n\n  if (!ssrExchange) {\n    throw new Error(\n      'Missing \"UrqlProvider\" component as a parent or did not pass in an \"ssrExchange\" to the Provider.'\n    );\n  }\n\n  if (typeof window == 'undefined') {\n    const data = ssrExchange.extractData();\n    if (rehydrationContext && data[operationKey]) {\n      const res = data[operationKey];\n      const parsed = {\n        ...res,\n        extensions: res.extensions\n          ? JSON.parse(res.extensions)\n          : res.extensions,\n        data: res.data ? JSON.parse(res.data) : res.data,\n        error: res.error,\n      };\n      rehydrationContext.operationValuesByKey[operationKey] = parsed;\n    }\n  } else {\n    const stores = (window[urqlTransportSymbol as any]\n      ? atob(window[urqlTransportSymbol as any] as any)\n      : []) as unknown as Array<{\n      rehydrate: Record<number, UrqlResult>;\n    }>;\n\n    const store = stores.find(\n      x => x && x.rehydrate && x.rehydrate[operationKey]\n    );\n    if (store) {\n      const result = store.rehydrate && store.rehydrate[operationKey];\n      if (result) {\n        delete store.rehydrate[operationKey];\n        ssrExchange.restoreData({\n          [operationKey]: {\n            extensions: JSON.stringify(result.extensions),\n            data: JSON.stringify(result.data),\n            error: result.error,\n          },\n        });\n        delete store.rehydrate[operationKey];\n      }\n    }\n  }\n}\n","'use client';\n\nimport type {\n  AnyVariables,\n  CombinedError,\n  GraphQLRequestParams,\n  Operation,\n  OperationContext,\n  RequestPolicy,\n} from 'urql';\nimport { createRequest, useQuery as orig_useQuery } from 'urql';\nimport { useUrqlValue } from './useUrqlValue';\n\n/** Input arguments for the {@link useQuery} hook.\n *\n * @param query - The GraphQL query that `useQuery` executes.\n * @param variables - The variables for the GraphQL query that `useQuery` executes.\n */\nexport type UseQueryArgs<\n  Variables extends AnyVariables = AnyVariables,\n  Data = any,\n> = {\n  /** Updates the {@link RequestPolicy} for the executed GraphQL query operation.\n   *\n   * @remarks\n   * `requestPolicy` modifies the {@link RequestPolicy} of the GraphQL query operation\n   * that `useQuery` executes, and indicates a caching strategy for cache exchanges.\n   *\n   * For example, when set to `'cache-and-network'`, {@link useQuery} will\n   * receive a cached result with `stale: true` and an API request will be\n   * sent in the background.\n   *\n   * @see {@link OperationContext.requestPolicy} for where this value is set.\n   */\n  requestPolicy?: RequestPolicy;\n  /** Updates the {@link OperationContext} for the executed GraphQL query operation.\n   *\n   * @remarks\n   * `context` may be passed to {@link useQuery}, to update the {@link OperationContext}\n   * of a query operation. This may be used to update the `context` that exchanges\n   * will receive for a single hook.\n   *\n   * Hint: This should be wrapped in a `useMemo` hook, to make sure that your\n   * component doesn’t infinitely update.\n   *\n   * @example\n   * ```ts\n   * const [result, reexecute] = useQuery({\n   *   query,\n   *   context: useMemo(() => ({\n   *     additionalTypenames: ['Item'],\n   *   }), [])\n   * });\n   * ```\n   */\n  context?: Partial<OperationContext>;\n  /** Prevents {@link useQuery} from automatically executing GraphQL query operations.\n   *\n   * @remarks\n   * `pause` may be set to `true` to stop {@link useQuery} from executing\n   * automatically. The hook will stop receiving updates from the {@link Client}\n   * and won’t execute the query operation, until either it’s set to `false`\n   * or the {@link UseQueryExecute} function is called.\n   *\n   * @see {@link https://urql.dev/goto/docs/basics/react-preact/#pausing-usequery} for\n   * documentation on the `pause` option.\n   */\n  pause?: boolean;\n} & GraphQLRequestParams<Data, Variables>;\n\n/** State of the current query, your {@link useQuery} hook is executing.\n *\n * @remarks\n * `UseQueryState` is returned (in a tuple) by {@link useQuery} and\n * gives you the updating {@link OperationResult} of GraphQL queries.\n *\n * Even when the query and variables passed to {@link useQuery} change,\n * this state preserves the prior state and sets the `fetching` flag to\n * `true`.\n * This allows you to display the previous state, while implementing\n * a separate loading indicator separately.\n */\nexport interface UseQueryState<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> {\n  /** Indicates whether `useQuery` is waiting for a new result.\n   *\n   * @remarks\n   * When `useQuery` is passed a new query and/or variables, it will\n   * start executing the new query operation and `fetching` is set to\n   * `true` until a result arrives.\n   *\n   * Hint: This is subtly different than whether the query is actually\n   * fetching, and doesn’t indicate whether a query is being re-executed\n   * in the background. For this, see {@link UseQueryState.stale}.\n   */\n  fetching: boolean;\n  /** Indicates that the state is not fresh and a new result will follow.\n   *\n   * @remarks\n   * The `stale` flag is set to `true` when a new result for the query\n   * is expected and `useQuery` is waiting for it. This may indicate that\n   * a new request is being requested in the background.\n   *\n   * @see {@link OperationResult.stale} for the source of this value.\n   */\n  stale: boolean;\n  /** The {@link OperationResult.data} for the executed query. */\n  data?: Data;\n  /** The {@link OperationResult.error} for the executed query. */\n  error?: CombinedError;\n  /** The {@link OperationResult.extensions} for the executed query. */\n  extensions?: Record<string, any>;\n  /** The {@link Operation} that the current state is for.\n   *\n   * @remarks\n   * This is the {@link Operation} that is currently being executed.\n   * When {@link UseQueryState.fetching} is `true`, this is the\n   * last `Operation` that the current state was for.\n   */\n  operation?: Operation<Data, Variables>;\n}\n\n/** Triggers {@link useQuery} to execute a new GraphQL query operation.\n *\n * @param opts - optionally, context options that will be merged with the hook's\n * {@link UseQueryArgs.context} options and the `Client`’s options.\n *\n * @remarks\n * When called, {@link useQuery} will re-execute the GraphQL query operation\n * it currently holds, even if {@link UseQueryArgs.pause} is set to `true`.\n *\n * This is useful for executing a paused query or re-executing a query\n * and get a new network result, by passing a new request policy.\n *\n * ```ts\n * const [result, reexecuteQuery] = useQuery({ query });\n *\n * const refresh = () => {\n *   // Re-execute the query with a network-only policy, skipping the cache\n *   reexecuteQuery({ requestPolicy: 'network-only' });\n * };\n * ```\n */\nexport type UseQueryExecute = (opts?: Partial<OperationContext>) => void;\n\n/** Result tuple returned by the {@link useQuery} hook.\n *\n * @remarks\n * Similarly to a `useState` hook’s return value,\n * the first element is the {@link useQuery}’s result and state,\n * a {@link UseQueryState} object,\n * and the second is used to imperatively re-execute the query\n * via a {@link UseQueryExecute} function.\n */\nexport type UseQueryResponse<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n> = [UseQueryState<Data, Variables>, UseQueryExecute];\n\n/** Hook to run a GraphQL query and get updated GraphQL results.\n *\n * @param args - a {@link UseQueryArgs} object, to pass a `query`, `variables`, and options.\n * @returns a {@link UseQueryResponse} tuple of a {@link UseQueryState} result, and re-execute function.\n *\n * @remarks\n * `useQuery` allows GraphQL queries to be defined and executed.\n * Given {@link UseQueryArgs.query}, it executes the GraphQL query with the\n * context’s {@link Client}.\n *\n * The returned result updates when the `Client` has new results\n * for the query, and changes when your input `args` change.\n *\n * Additionally, if the `suspense` option is enabled on the `Client`,\n * the `useQuery` hook will suspend instead of indicating that it’s\n * waiting for a result via {@link UseQueryState.fetching}.\n *\n * @see {@link https://urql.dev/goto/urql/docs/basics/react-preact/#queries} for `useQuery` docs.\n *\n * @example\n * ```ts\n * import { gql, useQuery } from 'urql';\n *\n * const TodosQuery = gql`\n *   query { todos { id, title } }\n * `;\n *\n * const Todos = () => {\n *   const [result, reexecuteQuery] = useQuery({\n *     query: TodosQuery,\n *     variables: {},\n *   });\n *   // ...\n * };\n * ```\n */\nexport function useQuery<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables,\n>(args: UseQueryArgs<Variables, Data>): UseQueryResponse<Data, Variables> {\n  const request = createRequest(\n    args.query,\n    (args.variables || {}) as AnyVariables\n  );\n  useUrqlValue(request.key);\n\n  const [result, execute] = orig_useQuery(args);\n\n  useUrqlValue(request.key);\n\n  return [result, execute];\n}\n"],"names":["DataHydrationContext","React","createContext","undefined","DataHydrationContextProvider","children","dataHydrationContext","useRef","window","current","isInjecting","operationValuesByKey","RehydrateScript","Object","keys","length","createElement","Fragment","data","__html","rehydrate","Buffer","from","JSON","stringify","toString","key","dangerouslySetInnerHTML","buildContext","Provider","value","SSRContext","UrqlProvider","ssr","client","urqlTransportSymbol","Symbol","for","useUrqlValue","operationKey","ssrExchange","useContext","rehydrationContext","insertHtml","ServerInsertedHTMLContext","useDataHydrationContext","Error","extractData","res","parsed","extensions","parse","error","store","atob","find","x","result","restoreData","useQuery","args","request","createRequest","query","variables","execute","orig_useQuery"],"mappings":"oKAeA,IAAMA,EAAuBC,EAAMC,mBAEjCC,GASWC,EAA+BA,EAC1CC,eAEA,IAAMC,EAAuBL,EAAMM,SAMnC,MALqB,oBAAVC,SACJF,EAAqBG,UACxBH,EAAqBG,QA0B3B,WACE,IAAMH,EAA2C,CAC/CI,aAAa,EACbC,qBAAsB,CAAE,EACxBC,kBAEE,GADAN,EAAqBI,aAAc,GAC9BG,OAAOC,KAAKR,EAAqBK,sBAAsBI,OAC1D,OAAOd,EAAMe,cAAcf,EAAMgB,UAEnC,IAhDqBC,EAgDfC,GAhDeD,EAgDY,CAC/BE,UAAW,IAAKd,EAAqBK,uBA/CnC,sDAA6CU,OAAOC,KAC1DC,KAAKC,UAAUN,IACfO,SAAS,cAkDP,OAFAnB,EAAqBK,qBAAuB,GAErCV,EAAMe,cAAc,SAAU,CACnCU,IAAKA,IACLC,wBAAyB,CAAER,WAE/B,GAGF,OAAOb,CACT,CAjDqCsB,KAG5B3B,EAAMe,cACXhB,EAAqB6B,SACrB,CAAEC,MAAOxB,EAAqBG,SAC9BJ,EACD,EAkBCqB,EAAM,EClDGK,EAAa9B,EAAMC,mBAC9BC,GAqCK,SAAS6B,GAAa3B,SAC3BA,EAAQ4B,IACRA,EAAGC,OACHA,IAEA,OAAOjC,EAAMe,cACXa,EACA,CAAEC,MAAOI,GACTjC,EAAMe,cACJe,EAAWF,SACX,CAAEC,MAAOG,GACThC,EAAMe,cAAcZ,EAA8B,CAAA,EAAIC,IAG5D,CCrDO,IACM8B,EAAsBC,OAAOC,IADd,kBAKrB,SAASC,EAAaC,GAC3B,IAAMC,EAAcvC,EAAMwC,WAAWV,GAC/BW,EF6BD,WACL,IAAMpC,EAAuBL,EAAMwC,WAAWzC,GACxC2C,EAAa1C,EAAMwC,WAAWG,GAEpC,GAAsB,oBAAXpC,OAQX,OANImC,GAAcrC,IAAyBA,EAAqBI,cAC9DJ,EAAqBI,aAAc,EACnCiC,GAAW,IACT1C,EAAMe,cAAcV,EAAqBM,gBAAiB,CAAE,MAGzDN,CACT,CE1C6BuC,GAE3B,IAAKL,EACH,MAAM,IAAIM,MACR,qGAIJ,GAAqB,oBAAVtC,OAAuB,CAChC,IAAMU,EAAOsB,EAAYO,cACzB,GAAIL,GAAsBxB,EAAKqB,GAAe,CAC5C,IAAMS,EAAM9B,EAAKqB,GACXU,EAAS,IACVD,EACHE,WAAYF,EAAIE,WACZ3B,KAAK4B,MAAMH,EAAIE,YACfF,EAAIE,WACRhC,KAAM8B,EAAI9B,KAAOK,KAAK4B,MAAMH,EAAI9B,MAAQ8B,EAAI9B,KAC5CkC,MAAOJ,EAAII,OAEbV,EAAmB/B,qBAAqB4B,GAAgBU,CAC1D,CACF,KAAO,CACL,IAMMI,GANU7C,OAAO2B,GACnBmB,KAAK9C,OAAO2B,IACZ,IAIiBoB,MACnBC,GAAKA,GAAKA,EAAEpC,WAAaoC,EAAEpC,UAAUmB,KAEvC,GAAIc,EAAO,CACT,IAAMI,EAASJ,EAAMjC,WAAaiC,EAAMjC,UAAUmB,GAC9CkB,WACKJ,EAAMjC,UAAUmB,GACvBC,EAAYkB,YAAY,CACtBnB,CAACA,GAAe,CACdW,WAAY3B,KAAKC,UAAUiC,EAAOP,YAClChC,KAAMK,KAAKC,UAAUiC,EAAOvC,MAC5BkC,MAAOK,EAAOL,gBAGXC,EAAMjC,UAAUmB,GAE3B,CACF,CACF,CCyIO,SAASoB,EAGdC,GACA,IAAMC,EAAUC,EACdF,EAAKG,MACJH,EAAKI,WAAa,CAAA,GAErB1B,EAAauB,EAAQnC,KAErB,IAAO+B,EAAQQ,GAAWC,EAAcN,GAIxC,OAFAtB,EAAauB,EAAQnC,KAEd,CAAC+B,EAAQQ,EAClB"}